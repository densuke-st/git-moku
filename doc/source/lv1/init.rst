.. _lv1-init:

===================================
新規にリポジトリを作る
===================================

適当なディレクトリを用意して、ローカルのリポジトリを作ってみましょう。

1. :file:`my-hello-world` ディレクトリを作り、その中で端末を開きます
2. :command:`git init` コマンドでリポジトリを生成します

.. code-block:: console
    :caption: リポジトリの作成(ローカル)

    # プロンプトはUNIX向けですが、PowerShellでも同じ操作ができます
    $ mkdir my-hello-world
    $ cd my-hello-world
    $ git init
    Initialized empty Git repository in /private/tmp/my-hello-world/.git/


このとき、initしたディレクトリにおいて、 :file:`.git` というディレクトリが作られます(UNIX環境であればドットファイルのため通常は見えない)。
このディレクトリの中は大きく2つの領域として使われ、全体として **リポジトリ** と呼ばれます。

.. figure:: images/repo-local-00.png

    init直後の状態


:file:`.git` 自体をリポジトリと一般的に呼びますが…

リポジトリ域(狭義での「リポジトリ」)
    コミットと呼ばれる変更不可のデータを納める領域、ローカルでコミットしているものもありますし、リモートから入ってくるものもあります。
    各コミットは親コミットとのリンクを持ちます、
ステージ(キャッシュ)
    コミットされる前の状態(ファイル群)が納められる領域、コミット後もコピーを(論理的に)持って差分抽出の補助も行います。

そしてディレクトリそのものは **ワークツリー** と呼びます。

次は、ファイルを配置してリポジトリに登録してみましょう。

vscodeにおけるinit
============================

Visual Studio Code(vscode)上でのgitの利用については2通り考えられます。

-  :command:`git` で作ったディレクトリ(リポジトリ・ワークツリーを開く
- vscode自身で作る

:command:`git` で作成したディレクトリを開く
------------------------------------------------------

ディレクトリ(フォルダー)を開けばgit機能が有効な状態となります。

.. code-block:: console
    :caption: コマンドラインから開く例

    $ ls -a
    .    ..    .git    sample1.py # .gitがあるのでリポジトリ込み状態
    $ code . # カレントディレクトリをvscodeで開く

.. figure:: images/05-git-vscode.png

    vscodeでgitリポジトリのディレクトリを開いた場合

:file:`.git` ディレクトリが認識されると、現在のブランチ名が下部ステータス部に追加されます。
また、gitリポジトリかどうかにかかわらず、左にgitによる履歴管理のボタンが用意されています。

vscodeの中で初期化する
----------------------------

新規に作ったディレクトリにおいて、vscodeにてリポジトリの生成(:command:`git init` 相当)も可能です。

.. figure:: images/06-new-dir-vscode.png

    新規に作ったばかりのディレクトリ、リポジトリを含まないのでステータスに出ていない

リポジトリを生成するには、ソース管理用のアイコンから作成(初期化)が可能です。

.. figure:: images/07-git-init-vscode.png

    初期化を指示する

もちろんコマンドパレットからも初期化の指示は可能です。

.. figure:: images/08-git-init-palette.png

    初期化を指示する(コマンドパレットから)

こちらは対象のディレクトリの確認が出る(候補として開いているディレクトリが入っている)ので、そのまま選択すれば初期化処理が終わります。
